services:
  # app:
  #   build: app
  
  # ml_worker:
  #   build: ml

  # inference_server:
  #   build: ml

  mlflow:
    build: mlflow
    ports:
      - 5000:5000
      - 4040:4040
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_MLFLOW_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_MLFLOW_PASSWORD}
      - MLFLOW_S3_IGNORE_TLS=true
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_MLFLOW_USER}:${POSTGRES_MLFLOW_PASSWORD}@db:5432/mlflow
      --host 0.0.0.0
      --default-artifact-root s3://ml-artifacts/

  prefect_server:
    image: prefecthq/prefect:3.1.0-python3.12
    command: prefect server start
    environment:
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${POSTGRES_PREFECT_USER}:${POSTGRES_PREFECT_PASSWORD}@db:5432/prefect
    ports:
      - 127.0.0.1:4200:4200
    volumes:
      - prefect_server__data:/root/.prefect
    healthcheck:
      test: python -c "import requests; requests.get('http://localhost:4200/api/health')"
      interval: 10s
    depends_on:
      db:
        condition: service_healthy

  prefect_configurer:
    image: prefecthq/prefect:3.0.3-python3.12
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
    command: >
      bash -c "prefect work-pool create main-work-pool --type process || exit 0"
    depends_on:
      prefect_server:
        condition: service_healthy

  ml_worker:
    build: ml
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    command: >
      bash -c "prefect deploy --all
      && prefect worker start --name worker_$$HOSTNAME --pool main-work-pool"
    depends_on:
      prefect_configurer:
        condition: service_completed_successfully
    profiles:
      - donotstart

  elt_worker:
    build: elt
    environment:
      - PREFECT_API_URL=http://prefect_server:4200/api
      - DESTINATION__FILESYSTEM__CREDENTIALS__AWS_ACCESS_KEY_ID=${MINIO_ELT_USER}
      - DESTINATION__FILESYSTEM__CREDENTIALS__AWS_SECRET_ACCESS_KEY=${MINIO_ELT_PASSWORD}
      - DESTINATION__FILESYSTEM__CREDENTIALS__ENDPOINT_URL=http://minio:9000
    volumes:
      - ./elt/.dlt:/.dlt
      - ./elt/prefect.yaml:/prefect.yaml
    command: >
      bash -c "uv run prefect --no-prompt deploy --all
      && uv run prefect worker start --name elt_worker__$$HOSTNAME --pool main-work-pool"
    depends_on:
      prefect_configurer:
        condition: service_completed_successfully

  inference_server:
    build: ml
    environment:
      - MLFLOW_REGISTRY_URI=http://mlflow:5000
    command: >
      uv run mlflow models serve -m "models:/el-modelo@champion"
    profiles:
      - donotstart

  db:
    image: postgres:16.2
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MLFLOW_USER=${POSTGRES_MLFLOW_USER}
      - POSTGRES_MLFLOW_PASSWORD=${POSTGRES_MLFLOW_PASSWORD}
      - POSTGRES_PREFECT_USER=${POSTGRES_PREFECT_USER}
      - POSTGRES_PREFECT_PASSWORD=${POSTGRES_PREFECT_PASSWORD}
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - db__data:/var/lib/postgresql/data/
      - ./db/init_dbs.sh:/docker-entrypoint-initdb.d/init_dbs.sh
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s

  minio:
    image: minio/minio:RELEASE.2023-01-25T00-19-54Z
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --address 0.0.0.0:9000 --console-address 0.0.0.0:9001 /data
    volumes:
      - minio__data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 20s
      retries: 3

  mc_admin:
    image: minio/mc
    entrypoint: >
      bash -c "/usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/ml-artifacts;
      /usr/bin/mc mb myminio/elt-data;

      /usr/bin/mc admin policy create myminio ml_readwrite ml_readwrite_policy.json;
      /usr/bin/mc admin user add myminio ${MINIO_MLFLOW_USER} ${MINIO_MLFLOW_PASSWORD};
      /usr/bin/mc admin group add myminio mlflow ${MINIO_MLFLOW_USER};
      /usr/bin/mc admin policy attach myminio ml_readwrite --group=mlflow;

      /usr/bin/mc admin policy create myminio elt_readwrite elt_readwrite_policy.json;
      /usr/bin/mc admin user add myminio ${MINIO_ELT_USER} ${MINIO_ELT_PASSWORD};
      /usr/bin/mc admin group add myminio elt ${MINIO_ELT_USER};
      /usr/bin/mc admin policy attach myminio elt_readwrite --group=elt;
      exit 0
      "
    volumes:
      - ./minio/ml_readwrite_policy.json:/ml_readwrite_policy.json
      - ./minio/elt_readwrite_policy.json:/elt_readwrite_policy.json
    depends_on:
      minio:
        condition: service_healthy

volumes:
  db__data:
  minio__data:
  prefect_server__data:
